import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button.jsx';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card.jsx';
import { Badge } from '@/components/ui/badge.jsx';
import { Progress } from '@/components/ui/progress.jsx';
import { Textarea } from '@/components/ui/textarea.jsx';
import { Input } from '@/components/ui/input.jsx';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs.jsx';
import { useTrainingApi } from '../hooks/useApi.js';
import { 
  Play, 
  Pause, 
  Square, 
  Upload, 
  Download, 
  Brain, 
  Target, 
  TrendingUp,
  BookOpen,
  Zap,
  Settings,
  FileText,
  BarChart3
} from 'lucide-react';

const TrainingInterface = () => {
  const [isTraining, setIsTraining] = useState(false);
  const [trainingProgress, setTrainingProgress] = useState(0);
  const [currentEpoch, setCurrentEpoch] = useState(0);
  const [totalEpochs, setTotalEpochs] = useState(10);
  const [trainingData, setTrainingData] = useState('');
  const [learningGoals, setLearningGoals] = useState([
    {
      id: 1,
      name: 'Master Advanced Pandas Operations',
      priority: 0.9,
      progress: 0.65,
      status: 'active',
      description: 'Develop comprehensive understanding of advanced pandas operations including multi-indexing, groupby operations, and performance optimization.'
    },
    {
      id: 2,
      name: 'Improve Code Quality Assessment',
      priority: 0.8,
      progress: 0.45,
      status: 'planned',
      description: 'Enhance ability to assess and improve code quality, including best practices, maintainability, and performance.'
    },
    {
      id: 3,
      name: 'Cross-Domain Knowledge Transfer',
      priority: 0.7,
      progress: 0.30,
      status: 'planned',
      description: 'Develop skills to transfer knowledge between different programming domains and frameworks.'
    }
  ]);

  const [trainingMetrics, setTrainingMetrics] = useState({
    loss: 0.234,
    accuracy: 0.892,
    learningRate: 0.001,
    batchSize: 32,
    modelSize: '1.2GB',
    compressionRatio: '6.1x'
  });

  const [knowledgeGaps, setKnowledgeGaps] = useState([
    { domain: 'python_core', topic: 'metaclasses', severity: 0.7 },
    { domain: 'performance', topic: 'parallel_processing', severity: 0.6 },
    { domain: 'web_development', topic: 'async_frameworks', severity: 0.8 },
    { domain: 'machine_learning', topic: 'model_deployment', severity: 0.5 }
  ]);

  // Simulate training progress
  useEffect(() => {
    let interval;
    if (isTraining) {
      interval = setInterval(() => {
        setTrainingProgress(prev => {
          const newProgress = prev + Math.random() * 2;
          if (newProgress >= 100) {
            setIsTraining(false);
            setCurrentEpoch(prev => prev + 1);
            return 100;
          }
          return newProgress;
        });
      }, 500);
    }
    return () => clearInterval(interval);
  }, [isTraining]);

  const handleStartTraining = () => {
    setIsTraining(true);
    setTrainingProgress(0);
  };

  const handleStopTraining = () => {
    setIsTraining(false);
  };

  const handleResetTraining = () => {
    setIsTraining(false);
    setTrainingProgress(0);
    setCurrentEpoch(0);
  };

  const handleUploadDataset = () => {
    // Simulate dataset upload
    alert('Dataset upload functionality would be implemented here');
  };

  const handleExportModel = () => {
    // Simulate model export
    alert('Model export functionality would be implemented here');
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'active': return 'bg-green-100 text-green-800';
      case 'planned': return 'bg-blue-100 text-blue-800';
      case 'completed': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getSeverityColor = (severity) => {
    if (severity > 0.7) return 'bg-red-100 text-red-800';
    if (severity > 0.5) return 'bg-yellow-100 text-yellow-800';
    return 'bg-green-100 text-green-800';
  };

  return (
    <div className="p-6 bg-gradient-to-br from-purple-50 to-pink-100 min-h-screen">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-6">
          <div className="flex items-center gap-3 mb-2">
            <Brain className="w-8 h-8 text-purple-600" />
            <h1 className="text-3xl font-bold text-gray-800">Training Interface</h1>
          </div>
          <p className="text-gray-600">Train and enhance ChatBT's capabilities through specialized learning sessions</p>
        </div>

        <Tabs defaultValue="training" className="space-y-6">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="training">Training Control</TabsTrigger>
            <TabsTrigger value="goals">Learning Goals</TabsTrigger>
            <TabsTrigger value="gaps">Knowledge Gaps</TabsTrigger>
            <TabsTrigger value="metrics">Performance Metrics</TabsTrigger>
          </TabsList>

          {/* Training Control Tab */}
          <TabsContent value="training" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Training Controls */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Play className="w-5 h-5" />
                    Training Controls
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="flex gap-2">
                    <Button 
                      onClick={handleStartTraining}
                      disabled={isTraining}
                      className="flex-1"
                    >
                      <Play className="w-4 h-4 mr-2" />
                      Start Training
                    </Button>
                    <Button 
                      variant="outline"
                      onClick={handleStopTraining}
                      disabled={!isTraining}
                    >
                      <Pause className="w-4 h-4 mr-2" />
                      Pause
                    </Button>
                    <Button 
                      variant="outline"
                      onClick={handleResetTraining}
                    >
                      <Square className="w-4 h-4 mr-2" />
                      Reset
                    </Button>
                  </div>

                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>Training Progress</span>
                      <span>{trainingProgress.toFixed(1)}%</span>
                    </div>
                    <Progress value={trainingProgress} className="w-full" />
                  </div>

                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="text-gray-500">Current Epoch:</span>
                      <p className="font-semibold">{currentEpoch} / {totalEpochs}</p>
                    </div>
                    <div>
                      <span className="text-gray-500">Status:</span>
                      <p className="font-semibold">
                        {isTraining ? 'Training...' : 'Ready'}
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Dataset Management */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <FileText className="w-5 h-5" />
                    Dataset Management
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <Textarea
                    placeholder="Paste training data here (JSON format)..."
                    value={trainingData}
                    onChange={(e) => setTrainingData(e.target.value)}
                    rows={6}
                  />
                  
                  <div className="flex gap-2">
                    <Button 
                      variant="outline" 
                      onClick={handleUploadDataset}
                      className="flex-1"
                    >
                      <Upload className="w-4 h-4 mr-2" />
                      Upload Dataset
                    </Button>
                    <Button 
                      variant="outline"
                      onClick={handleExportModel}
                      className="flex-1"
                    >
                      <Download className="w-4 h-4 mr-2" />
                      Export Model
                    </Button>
                  </div>

                  <div className="text-sm text-gray-500">
                    <p>Supported formats: JSON, JSONL, CSV</p>
                    <p>Current dataset: 10 Pandas examples (4,247 tokens)</p>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Training Metrics */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <BarChart3 className="w-5 h-5" />
                  Real-time Training Metrics
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
                  {Object.entries(trainingMetrics).map(([key, value]) => (
                    <div key={key} className="text-center">
                      <p className="text-sm text-gray-500 capitalize">
                        {key.replace(/([A-Z])/g, ' $1').trim()}
                      </p>
                      <p className="text-lg font-semibold text-gray-800">{value}</p>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Learning Goals Tab */}
          <TabsContent value="goals" className="space-y-6">
            <div className="grid gap-4">
              {learningGoals.map((goal) => (
                <Card key={goal.id}>
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <CardTitle className="text-lg">{goal.name}</CardTitle>
                      <div className="flex items-center gap-2">
                        <Badge className={getStatusColor(goal.status)}>
                          {goal.status}
                        </Badge>
                        <Badge variant="outline">
                          Priority: {goal.priority.toFixed(1)}
                        </Badge>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <p className="text-gray-600 mb-4">{goal.description}</p>
                    
                    <div className="space-y-2">
                      <div className="flex justify-between text-sm">
                        <span>Progress</span>
                        <span>{(goal.progress * 100).toFixed(1)}%</span>
                      </div>
                      <Progress value={goal.progress * 100} className="w-full" />
                    </div>

                    <div className="flex gap-2 mt-4">
                      <Button size="sm" variant="outline">
                        <Target className="w-4 h-4 mr-2" />
                        Set Active
                      </Button>
                      <Button size="sm" variant="outline">
                        <Settings className="w-4 h-4 mr-2" />
                        Configure
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Target className="w-5 h-5" />
                  Generate New Learning Goal
                </CardTitle>
              </CardHeader>
              <CardContent>
                <Button className="w-full">
                  <Brain className="w-4 h-4 mr-2" />
                  Auto-Generate Goals from Knowledge Gaps
                </Button>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Knowledge Gaps Tab */}
          <TabsContent value="gaps" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <TrendingUp className="w-5 h-5" />
                  Identified Knowledge Gaps
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {knowledgeGaps.map((gap, index) => (
                    <div key={index} className="flex items-center justify-between p-3 border rounded-lg">
                      <div className="flex-1">
                        <p className="font-medium capitalize">
                          {gap.domain.replace('_', ' ')} - {gap.topic.replace('_', ' ')}
                        </p>
                        <p className="text-sm text-gray-500">
                          Domain: {gap.domain} | Topic: {gap.topic}
                        </p>
                      </div>
                      <div className="flex items-center gap-2">
                        <Badge className={getSeverityColor(gap.severity)}>
                          Severity: {gap.severity.toFixed(1)}
                        </Badge>
                        <Button size="sm" variant="outline">
                          <BookOpen className="w-4 h-4 mr-2" />
                          Learn
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>

                <div className="mt-6">
                  <Button className="w-full">
                    <Zap className="w-4 h-4 mr-2" />
                    Run Knowledge Gap Analysis
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Performance Metrics Tab */}
          <TabsContent value="metrics" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Model Performance</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="flex justify-between">
                      <span>Accuracy</span>
                      <span className="font-semibold">89.2%</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Loss</span>
                      <span className="font-semibold">0.234</span>
                    </div>
                    <div className="flex justify-between">
                      <span>F1 Score</span>
                      <span className="font-semibold">0.876</span>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Compression Stats</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="flex justify-between">
                      <span>Original Size</span>
                      <span className="font-semibold">2.2 GB</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Compressed Size</span>
                      <span className="font-semibold">360 MB</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Compression Ratio</span>
                      <span className="font-semibold text-green-600">6.1x</span>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Learning Efficiency</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="flex justify-between">
                      <span>Concepts/Hour</span>
                      <span className="font-semibold">12.5</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Retention Rate</span>
                      <span className="font-semibold">83.5%</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Transfer Success</span>
                      <span className="font-semibold">59.3%</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>

            <Card>
              <CardHeader>
                <CardTitle>Training History</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  <div className="flex justify-between items-center p-2 border rounded">
                    <span>Pandas Specialist Training</span>
                    <Badge className="bg-green-100 text-green-800">Completed</Badge>
                  </div>
                  <div className="flex justify-between items-center p-2 border rounded">
                    <span>Deep Compression Pipeline</span>
                    <Badge className="bg-green-100 text-green-800">Completed</Badge>
                  </div>
                  <div className="flex justify-between items-center p-2 border rounded">
                    <span>Cross-Domain Learning Session</span>
                    <Badge className="bg-blue-100 text-blue-800">In Progress</Badge>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};

export default TrainingInterface;

